/*This will output a user's payment/deposit history
  Note: To run this program, you also need to use the 'Deposit' Class
*/

import java.util.Scanner;
import java.util.Random;
import java.util.List;

class FinancialHistory extends Deposit
{
    //Attributes of User
    private String paymentHistoryDate;
    private double paymentHistoryAmount;
    protected String name;
    protected String address;
    private String phoneNumber;
    private int[] SSN = new int[8];
    private int creditScore;
    
    //Format user input
    private StringBuilder stringSSN = new StringBuilder();
    private StringBuilder stringPhoneNumber = new StringBuilder();
    
    //Attributes to calculate a user's credit score
    private int missedPayments;
    private double totalCreditLimit;
    private double currentDebt;
    private int years;
    private int creditInqueries;
    private boolean hasLoan;

    //To test functionality
    private Random rand = new Random();
    private Scanner keyboard = new Scanner(System.in);

    FinancialHistory()
    {
        //Initialize user values
        name = "";
        address = "";
        phoneNumber = "";
        creditScore = 625;
        paymentHistoryAmount = 0.00;
        paymentHistoryDate = "";
    
        //Initialize user credit score values
        missedPayments = 0;
        totalCreditLimit = 0;
        currentDebt = 0;
        years = 0;
        creditInqueries = 0;
        hasLoan = false;
    }  
    
    void setUserInformation()
    {
        //Set the user's name
        System.out.println("Enter your name: ");
        name = keyboard.nextLine();
    
        //Set the user's phone number
        System.out.println("Enter your phone number: ");
        phoneNumber = keyboard.nextLine();
        formatPhoneNumber();
    
        //Set the user's address
        System.out.println("Enter your address: ");
        address = keyboard.nextLine();

        //Generate the user's SSN
        generateSSN();
    }

    public void generateSSN()
    {
        for(int i = 0; i < SSN.length; i++)
        {
            SSN[i] = rand.nextInt(10);
        }

        for(int i = 0; i < SSN.length; i++)
        {
            stringSSN.append(SSN[i]);
            if(i == 2 || i == 4)
            {
                stringSSN.append("-");
            }
        }
    }
    
    public void formatPhoneNumber()
    {
        for(int i = 0; i < phoneNumber.length(); i++)
        {
            stringPhoneNumber.append(phoneNumber.charAt(i));
            if(i == 2 || i == 5)
            {
                stringPhoneNumber.append("-");
            }
        }
    }
    
    public void setCreditAttributes()
    {
        System.out.print("\nMissed payments: ");
        missedPayments = keyboard.nextInt();
        
        System.out.print("Total Credit Limit: ");
        totalCreditLimit = keyboard.nextDouble();
        
        System.out.print("Current Debt: ");
        currentDebt = keyboard.nextInt();
        
        System.out.print("Years of Credit History: ");
        years = keyboard.nextInt();
        
        System.out.print("Credit Inqueries: ");
        creditInqueries = keyboard.nextInt();
        
        System.out.print("Do you currently have any loans?(yes/no) ");
        hasLoan = keyboard.next().equalsIgnoreCase("yes");
    }
    
    public int calculateCreditScore()
    {
        //Payment History
        creditScore -= missedPayments * 10;

        //Credit Utilization
        if(totalCreditLimit > 0)
        {
            double utilization = currentDebt / totalCreditLimit;

            if(utilization < 0.1)
                creditScore += 30;
            else if (utilization < 0.3)
                creditScore += 20;
            else if (utilization < 0.5)
                creditScore += 10;
            else
                creditScore -=20;
        }

        //Credit History Length
        creditScore += Math.min(years * 2, 30);

        //New inqueries
        creditScore -= creditInqueries * 5;

        if(hasLoan)
            creditScore += 20;

        return Math.max(300, Math.min(850, creditScore));
    }
    
    public void printUserInformation()
    {
        System.out.println("\n---User information---");
        System.out.println("Name: " + name);
        System.out.println("Phone Number: " + stringPhoneNumber.toString());
        System.out.println("Address: " + address);
        System.out.println("SSN: " + stringSSN.toString());
        System.out.println("Amount Deposited: $" + getCurrentAmount());
        
        System.out.println("\n---Deposit History---");
        List<Double> deposits = getDepositHistory();
        List<String> dates = getDepositDates();
        
        for(int i = 0; i < deposits.size(); i++)
        {
            System.out.printf(" -$%.2f on %s\n", deposits.get(i), dates.get(i));
        }
    }
}

public class FinancialHistory_Test 
{
    public static void main(String[] args) 
    {
        FinancialHistory fh = new FinancialHistory();
        Scanner key = new Scanner(System.in);
        
        fh.setUserInformation();
        fh.setCreditAttributes();
        
        System.out.println("\nHow much would you like to deposit? ");
        double dt = key.nextDouble();
        fh.makeDeposit(dt);
        
        fh.printUserInformation();
        System.out.println("Credit Score: " + fh.calculateCreditScore());
    }
}
