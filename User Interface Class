//This code will handle the user interface with a GUI
package com.mycompany.finalbank;

import java.util.Scanner;

// Console-based menu for FinalBank
public class UserInterface {
    public static void displayMenu(Accounts user) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n===== FinalBank Menu =====");
            System.out.println("1. View Account Info");
            System.out.println("2. Make a Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer Funds");
            System.out.println("5. View Transaction History");
            System.out.println("6. View Financial History");
            System.out.println("7. Set Appointment");
            System.out.println("8. Apply for Credit Card");
            System.out.println("9. Generate Account Report");
            System.out.println("10. Change Password");
            System.out.println("11. Change PIN");
            System.out.println("12. Change Email");
            System.out.println("13. View Account & Routing Numbers");
            System.out.println("14. View Financial Advisor Info");
            System.out.println("15. Logout");
            System.out.print("Enter your choice: ");

            while (!scanner.hasNextInt()) {
                System.out.print("Please enter a valid number: ");
                scanner.next();
            }
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    // View Account Info
                    System.out.println("\n--- Account Info ---");
                    System.out.println("Name       : " + user.getName());
                    System.out.println("Username   : " + user.getUsername());
                    System.out.println("Email      : " + user.getEmail());
                    System.out.println("Account #  : " + user.getAccount_num());
                    System.out.println("Routing #  : " + user.getRouting_num());
                    System.out.println("Address    : " + user.getAddress());
                    System.out.println("Zip Code   : " + user.getZip());
                    System.out.printf("Balance    : $%.2f%n", user.getBalance());
                    break;

                case 2:
                    // Make a Deposit
                    double depAmt = 0;
                    while (true) {
                        System.out.print("Enter amount to deposit: ");
                        if (scanner.hasNextDouble()) {
                            depAmt = scanner.nextDouble();
                            scanner.nextLine();
                            if (depAmt > 0) break;
                            else System.out.println(" Deposit amount must be greater than 0.");
                        } else {
                            System.out.println(" Invalid input.");
                            scanner.next();
                        }
                    }
                    Deposit dep = new Deposit();
                    dep.makeDeposit(depAmt, user);
                    System.out.printf("✅ New Balance: $%.2f%n", user.getBalance());
                    break;

                case 3:
                    // Withdraw
                    double wAmt = 0;
                    while (true) {
                        System.out.print("Enter amount to withdraw: ");
                        if (scanner.hasNextDouble()) {
                            wAmt = scanner.nextDouble();
                            scanner.nextLine();
                            if (wAmt > 0) break;
                            else System.out.println(" Withdrawal amount must be greater than 0.");
                        } else {
                            System.out.println(" Invalid input.");
                            scanner.next();
                        }
                    }
                    Withdrawal wit = new Withdrawal();
                    wit.makeWithdrawal(wAmt, user);
                    System.out.printf("✅ New Balance: $%.2f%n", user.getBalance());
                    break;

                case 4:
                    // Transfer Funds
                    System.out.print("Enter recipient username: ");
                    String recipientUsername = scanner.nextLine().trim();
                    Accounts recipient = ExcelAccountLoader.loadAccountByUsername("Accounts.xlsx", recipientUsername);
                    if (recipient == null) {
                        System.out.println("Recipient not found.");
                    } else {
                        double tAmt = 0;
                        while (true) {
                            System.out.print("Enter amount to transfer: ");
                            if (scanner.hasNextDouble()) {
                                tAmt = scanner.nextDouble();
                                scanner.nextLine();
                                if (tAmt > 0) break;
                                else System.out.println(" Transfer amount must be greater than 0.");
                            } else {
                                System.out.println(" Invalid input.");
                                scanner.next();
                            }
                        }
                        try {
                            TransferFunds tf = new TransferFunds();
                            tf.transferFunds(user, recipient, tAmt);
                            System.out.println("✅ Transfer successful. Transfer ID: " + tf.getTransferID());
                            System.out.printf("   Your new balance: $%.2f%n", user.getBalance());
                        } catch (IllegalArgumentException ex) {
                            System.out.println("Error: " + ex.getMessage());
                        }
                    }
                    break;

                case 5:
                    // View Transaction History
                    System.out.println("\n--- Transaction History ---");
                    for (Transaction txn : user.getTransactions()) {
                        System.out.println(txn);
                    }
                    break;

                case 6:
                    // View Financial History
                    FinancialHistory fh = new FinancialHistory();
                    fh.setUserInformation();
                    fh.setCreditAttributes();
                    fh.printUserInformation(user);
                    System.out.println("Credit Score: " + fh.calculateCreditScore());
                    break;

                case 7:
                    // Set Appointment
                    System.out.print("Enter appointment date (MM/dd/yyyy): ");
                    String date = scanner.nextLine().trim();
                    System.out.print("Enter appointment time (hh:mm AM/PM): ");
                    String time = scanner.nextLine().trim();
                    Appointment appt = new Appointment();
                    System.out.println(appt.scheduleAppointment(date, time));
                    break;

                case 8:
                    // Apply for Credit Card
                    CardApplication app = new CardApplication();
                    app.cardAppMenu();
                    System.out.print("Enter Application SSN: ");
                    int ssn = scanner.nextInt(); scanner.nextLine();
                    app.setAppSSN(ssn);
                    CreditCard card = new CreditCard();
                    card.generateCardNumber();
                    card.generateExpirationDate();
                    card.generateCVV();
                    card.startingBalance();
                    break;

                case 9:
                    // Generate Account Report
                    PrintReport report = new PrintReport();
                    report.generateReport();
                    break;

                case 10:
                    // Change Password
                    user.changePassword();
                    break;

                case 11:
                    // Change PIN
                    user.changePIN();
                    break;

                case 12:
                    // Change Email
                    user.changeEmail();
                    break;

                case 13:
                    // View Account & Routing Numbers
                    user.checkAccount();
                    user.checkRouting();
                    break;

                case 14:
                    // View Financial Advisor Info
                    Employee advisor = new Employee();
                    advisor.setEmployeeName();
                    advisor.setEmployeeID();
                    advisor.setCustomerID();
                    break;

                case 15:
                    // Logout
                    System.out.println("Logging out...");
                    break;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        } while (choice != 15);
    }
}
