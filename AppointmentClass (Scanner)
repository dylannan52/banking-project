package com.mycompany.finalbank;

import java.util.ArrayList;
import java.util.Scanner;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class Appointment {

    private String appointmentDate;
    private String appointmentTime;
    private static ArrayList<Appointment> appointments = new ArrayList<>();
    private Scanner keyboard;

    public Appointment() {
        appointmentDate = "";
        appointmentTime = "";
        keyboard = new Scanner(System.in);
    }

    public void setAppointment() {
        System.out.print("Enter appointment date (MM/dd/yyyy): ");
        appointmentDate = keyboard.nextLine();

        while (!validateAppointmentDate()) {
            System.out.print("Invalid date. Please enter again (MM/dd/yyyy): ");
            appointmentDate = keyboard.nextLine();
        }

        System.out.print("Enter appointment time (hh:mm AM/PM): ");
        appointmentTime = keyboard.nextLine();

        while (!validateAppointmentTime()) {
            System.out.print("Invalid time. Please enter again (hh:mm AM/PM): ");
            appointmentTime = keyboard.nextLine();
        }

        if (isAvailable()) {
            appointments.add(this);
            System.out.println(" Appointment scheduled on " + appointmentDate + " at " + appointmentTime);
        } else {
            System.out.println("That time slot is already taken. Try another.");
        }
    }

    private boolean validateAppointmentDate() {
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("MM/dd/yyyy");

        try {
            LocalDate date = LocalDate.parse(appointmentDate, format);
            return !date.isBefore(currentDate);
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    private boolean validateAppointmentTime() {
        DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm a");

        try {
            LocalTime.parse(appointmentTime, format);
            return true;
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    private boolean isAvailable() {
        for (Appointment a : appointments) {
            if (a.appointmentDate.equals(this.appointmentDate) &&
                a.appointmentTime.equals(this.appointmentTime)) {
                return false;
            }
        }
        return true;
    }
}
