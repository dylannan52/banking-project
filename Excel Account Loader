package com.mycompany.finalbank;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;

public class ExcelAccountLoader {
    public static List<Map<String, String>> loadAccounts(String filePath) {
        List<Map<String, String>> accounts = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            Row headerRow = sheet.getRow(0);
            int columnCount = headerRow.getPhysicalNumberOfCells();

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;
                Map<String, String> accountData = new HashMap<>();
                for (int j = 0; j < columnCount; j++) {
                    Cell cell = row.getCell(j);
                    String key = headerRow.getCell(j).getStringCellValue().trim();
                    String value;
                    if (cell == null) {
                        value = "";
                    } else {
                        switch (cell.getCellType()) {
                            case STRING:   value = cell.getStringCellValue().trim(); break;
                            case NUMERIC:  value = DateUtil.isCellDateFormatted(cell)
                                                 ? cell.getDateCellValue().toString()
                                                 : String.valueOf((long)cell.getNumericCellValue()); break;
                            case BOOLEAN:  value = String.valueOf(cell.getBooleanCellValue()); break;
                            case FORMULA:  value = cell.toString().trim(); break;
                            default:       value = cell.toString().trim();
                        }
                    }
                    accountData.put(key, value);
                }
                accounts.add(accountData);
            }
        } catch (Exception e) {
            System.out.println("Error reading Excel file: " + e.getMessage());
        }
        return accounts;
    }

    public static Accounts loginAndLoadAccount(String filePath, String inputUsername, String inputPassword) {
        for (Map<String, String> acct : loadAccounts(filePath)) {
            String user = acct.get("username");
            String pass = acct.get("password");
            if (user != null && pass != null && user.equalsIgnoreCase(inputUsername) && pass.equals(inputPassword)) {
                return parseAccountMap(acct);
            }
        }
        return null;
    }

    public static Accounts loadAccountByUsername(String filePath, String inputUsername) {
        for (Map<String, String> acct : loadAccounts(filePath)) {
            String user = acct.get("username");
            if (user != null && user.equalsIgnoreCase(inputUsername)) {
                return parseAccountMap(acct);
            }
        }
        return null;
    }

    private static Accounts parseAccountMap(Map<String, String> account) {
        try {
            int pin  = Integer.parseInt(account.getOrDefault("pin", "0"));
            long acc = Long.parseLong(account.getOrDefault("acc#", "0"));
            long rout= Long.parseLong(account.getOrDefault("rout#", "0"));
            int zip  = Integer.parseInt(account.getOrDefault("zip", "0"));
            return new Accounts(
                account.get("username"),
                account.get("password"),
                pin,
                account.get("email"),
                acc,
                rout,
                account.get("Name"),
                account.get("address"),
                zip
            );
        } catch (Exception e) {
            System.out.println("Error parsing account row: " + e.getMessage());
            return null;
        }
    }
}
