package com.mycompany.finalbank;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

//Represents a user account with balance and transaction history.
public class Accounts {
    private String username;
    private String password;
    private int pin_number;
    private String email;
    protected long account_num;
    protected long routing_num;
    protected String name;
    protected String address;
    protected int zip;
    private double balance = 0.0;

    // Ledger for transaction history
    private List<Transaction> ledger = new ArrayList<>();

    public Accounts(String username,
                    String password,
                    int pin_number,
                    String email,
                    long account_num,
                    long routing_num,
                    String name,
                    String address,
                    int zip) {
        this.username    = username;
        this.password    = password;
        this.pin_number  = pin_number;
        this.email       = email;
        this.account_num = account_num;
        this.routing_num = routing_num;
        this.name        = name;
        this.address     = address;
        this.zip         = zip;
    }

    public String getUsername() { return username; }
    public String getPassword() { return password; }
    public int getPin_number() { return pin_number; }
    public String getEmail() { return email; }
    public long getAccount_num() { return account_num; }
    public long getRouting_num() { return routing_num; }
    public String getName() { return name; }
    public String getAddress() { return address; }
    public int getZip() { return zip; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
    public void addToBalance(double amount) { this.balance += amount; }
    public void subtractFromBalance(double amount) { this.balance -= amount; }

    /** Record a transaction in this account's history. */
    public void addTransaction(Transaction txn) {
        ledger.add(txn);
    }

    public List<Transaction> getTransactions() {
        return Collections.unmodifiableList(ledger);
    }

    
    public void changePassword() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter current password: ");
        String current = sc.nextLine().trim();
        if (!current.equals(password)) {
            System.out.println("Incorrect current password.");
            return;
        }
        System.out.print("Enter new password: ");
        String newPass = sc.nextLine().trim();
        System.out.print("Confirm new password: ");
        String confirm = sc.nextLine().trim();
        if (!newPass.equals(confirm)) {
            System.out.println("Passwords do not match. Password not changed.");
            return;
        }
        this.password = newPass;
        System.out.println("Password changed successfully.");
    }

    
    public void changePIN() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter current PIN: ");
        String oldPinStr = sc.nextLine().trim();
        try {
            int oldPin = Integer.parseInt(oldPinStr);
            if (oldPin != pin_number) {
                System.out.println("Incorrect current PIN.");
                return;
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid PIN format.");
            return;
        }
        System.out.print("Enter new PIN: ");
        String newPinStr = sc.nextLine().trim();
        System.out.print("Confirm new PIN: ");
        String confirmStr = sc.nextLine().trim();
        if (!newPinStr.equals(confirmStr)) {
            System.out.println("PIN entries do not match. PIN not changed.");
            return;
        }
        try {
            this.pin_number = Integer.parseInt(newPinStr);
            System.out.println("PIN changed successfully.");
        } catch (NumberFormatException e) {
            System.out.println("Invalid new PIN format. PIN not changed.");
        }
    }

    
    public void changeEmail() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter new email address: ");
        String newEmail = sc.nextLine().trim();
        System.out.print("Confirm new email: ");
        String confirm = sc.nextLine().trim();
        if (!newEmail.equalsIgnoreCase(confirm)) {
            System.out.println("Email entries do not match. Email not changed.");
            return;
        }
        this.email = newEmail;
        System.out.println("Email changed successfully to " + this.email);
    }

    /** Prints the account number. */
    public void checkAccount() {
        System.out.println("Account number is: " + account_num);
    }

    /** Prints the routing number. */
    public void checkRouting() {
        System.out.println("Routing number is: " + routing_num);
    }
}


